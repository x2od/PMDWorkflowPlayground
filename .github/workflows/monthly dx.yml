# Unique name for this workflow
name: Monthly Scan (DX)

on:
  workflow_dispatch:

permissions:
  contents: read

# Jobs to be executed
jobs:
  run-pmd:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    runs-on: ubuntu-latest
    outputs:
      error_count: ${{ steps.evaluate_errors.outputs.ERROR_COUNT }}

    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v4

      # Install PMD
      - name: 'Install PMD'
        id: pmd
        run: |
          PMD_VERSION=$(curl -s https://api.github.com/repos/pmd/pmd/releases/latest | grep '.tag_name' | sed 's:.*/::' | sed 's:",::')
          echo $PMD_VERSION
          if [ ! -f "./pmd-dist-$PMD_VERSION-bin.zip" ]; then 
            wget -q https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-dist-$PMD_VERSION-bin.zip
            unzip -q pmd-dist-$PMD_VERSION-bin.zip -d ~
            mv ~/pmd-bin-$PMD_VERSION ~/pmd
            ~/pmd/bin/pmd --version
          fi
          rm -f .pmdCache

      - name: 'Run PMD scan to CSV - All violations'
        id: pmd_csv_all
        run: |
          ~/pmd/bin/pmd check --dir . --rulesets config/pmd/ruleset.xml --format csv --report-file pmd-all.csv --no-cache --no-progress --no-fail-on-violation --no-fail-on-error --property package=false --property ruleSet=false --property problem=false --property rule=false

      - name: Upload all violations file in CSV format

        uses: actions/upload-artifact@v4
        with:
          path: pmd-all.csv
          name: PMDViolations
          compression-level: 0

      # - name: 'Run PMD scan to CSV - Blockers'
      #   id: pmd_csv_blocks
      #   run: |
      #     ~/pmd/bin/pmd check --dir . --rulesets config/pmd/ruleset.xml --format csv --report-file pmd-blocks.csv --no-cache --no-progress --no-fail-on-violation --no-fail-on-error --property package=false --property ruleSet=false --property problem=false --property rule=false --minimum-severity 2

      # - name: Read CSV - Blockers'
      #   id: csv
      #   uses: juliangruber/read-file-action@v1
      #   with:
      #     path: ./pmd-blocks.csv

      # - name: Create MD - Blockers'
      #   uses: petems/csv-to-md-table-action@master
      #   id: csv-table-output-blockers
      #   with:
      #     csvinput: ${{ steps.csv.outputs.content }}

      # - name: Summary Table - Blockers
      #   id: md_to_output-blocks
      #   run: |
      #     ERROR_COUNT=$(wc -l pmd-blocks.csv|awk '{print $1}')
      #     echo $ERROR_COUNT
      #     ERROR_COUNT=$((ERROR_COUNT - 1))
      #     echo "BLOCKERS FOUND:" $ERROR_COUNT  # Print to console
      #     if [[ $ERROR_COUNT > 0 ]]; then
      #       echo "## Blockers" >> $GITHUB_STEP_SUMMARY
      #       echo "${{steps.csv-table-output-blockers.outputs.markdown-table}}" >> $GITHUB_STEP_SUMMARY
      #     fi

      # - name: Evaluate Errrors
      #   id: evaluate_errors
      #   run: |
      #     ERROR_COUNT=$(wc -l pmd-blockers.csv|awk '{print $1}')
      #     echo $ERROR_COUNT
      #     ERROR_COUNT=$((ERROR_COUNT - 1))
      #     # echo $ERROR_COUNT >> "$GITHUB_OUTPUT"
      #     echo "ERRORS FOUND:" $ERROR_COUNT  # Print to console
      #     if [[ $ERROR_COUNT > 0 ]]; then
      #       ERROR_STRING="$ERROR_COUNT Blocking Violations Detected"
      #       echo "::error::$ERROR_STRING"
      #       exit 1
      #     fi
