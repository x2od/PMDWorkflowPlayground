# Unique name for this workflow
name: Monthly Scan (DX)

on:
  workflow_dispatch:
    inputs:
      minimum_severity:
        required: true
        type: choice
        description: Minimum Severity (defaults to 5 - show all violations)
        default: '5'
        options:
          - 5
          - 4
          - 3
          - 2
          - 1

permissions:
  contents: read

# Jobs to be executed
jobs:
  run-pmd:
    permissions:
      contents: read # for actions/checkout to fetch code
    outputs:
      filename: ${{ steps.set_filename.outputs.filename }}
    runs-on: ubuntu-latest

    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v4

      - name: 'Set Filename'
        id: set_filename
        run: echo "filename=${{ github.event.repository.name }}_$(date --utc +%Y%m%d_%H%M%SZ)" >> "$GITHUB_OUTPUT"

      # Install PMD
      - name: 'Install PMD'
        id: pmd
        run: |
          PMD_VERSION=$(curl -s https://api.github.com/repos/pmd/pmd/releases/latest | grep '.tag_name' | sed 's:.*/::' | sed 's:",::')
          echo $PMD_VERSION
          if [ ! -f "./pmd-dist-$PMD_VERSION-bin.zip" ]; then 
            wget -q https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-dist-$PMD_VERSION-bin.zip
            unzip -q pmd-dist-$PMD_VERSION-bin.zip -d ~
            mv ~/pmd-bin-$PMD_VERSION ~/pmd
            ~/pmd/bin/pmd --version
          fi
          rm -f .pmdCache

      - name: 'Run PMD scan to CSV - All violations'
        id: pmd_csv_all
        run: |
          ~/pmd/bin/pmd check --dir . --rulesets config/pmd/ruleset.xml --format csv --report-file ${{ steps.set_filename.outputs.filename }}.csv --no-cache --no-progress --no-fail-on-violation --no-fail-on-error --property package=false --property ruleSet=false --property problem=false --minimum-priority "${{ github.event.inputs.minimum_severity }}"

      - name: Evaluate Errrors
        id: evaluate_errors
        run: |
          ERROR_COUNT=$(wc -l ${{ steps.set_filename.outputs.filename }}.csv|awk '{print $1}')
          echo $ERROR_COUNT
          ERROR_COUNT=$((ERROR_COUNT - 1))
          echo $ERROR_COUNT >> "$GITHUB_OUTPUT"
          echo "ERRORS FOUND:" $ERROR_COUNT  Print to console
          if [[ $ERROR_COUNT > 0 ]]; then
            ERROR_STRING="$ERROR_COUNT Blocking Violations Detected"
            echo "::error::$ERROR_STRING"
          elif [[ $ERROR_COUNT -eq 0 ]]; then
            echo "::notice::No Violations Detected"
          fi

      - name: Upload all violations file in CSV format
        if: ${{ steps.evaluate_errors.outputs.ERROR_COUNT }} > 0
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.set_filename.outputs.filename }}.csv
          name: ${{ steps.set_filename.outputs.filename }}_PMD
          compression-level: 0
