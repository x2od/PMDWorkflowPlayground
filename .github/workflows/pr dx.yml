# Unique name for this workflow
name: On PR (DX)

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read

# Jobs to be executed
jobs:
  run-pmd:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    runs-on: ubuntu-latest
    outputs:
      error_count: ${{ steps.evaluate_errors.outputs.ERROR_COUNT }}

    steps:
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v4

      # Install PMD
      - name: 'Install PMD'
        id: pmd
        run: |
          PMD_VERSION=$(curl -s https://api.github.com/repos/pmd/pmd/releases/latest | grep '.tag_name' | sed 's:.*/::' | sed 's:",::')
          echo $PMD_VERSION
          wget -q https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-dist-$PMD_VERSION-bin.zip
          unzip -q pmd-dist-$PMD_VERSION-bin.zip -d ~
          mv ~/pmd-bin-$PMD_VERSION ~/pmd
          ~/pmd/bin/pmd --version

      - name: Collect changed files
        env:
          GH_TOKEN: ${{ github.token }}
          BRANCH: ${{ github.head_ref }}
        run: |
          echo "Files for this PR:"
          gh pr diff "$BRANCH" --name-only > changed.txt
          echo "--------------------"
          cat changed.txt

      # Run PMD scan
      - name: 'Run PMD scan to SARIF'
        id: pmd_sarif
        run: ~/pmd/bin/pmd check --file-list changed.txt --rulesets config/pmd/ruleset.xml --format sarif --report-file pmd-cli-report.sarif --cache .pmdCache --no-progress --no-fail-on-violation --no-fail-on-error --minimum-priority 2

      - name: Upload violations file in SARIF format
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-cli-report.sarif
          category: PMD

      - name: 'Run PMD scan to CSV - Blockers'
        id: pmd_csv
        if: always()
        run: |
          ~/pmd/bin/pmd check --file-list changed.txt --rulesets config/pmd/ruleset.xml --format csv --report-file pmd-blockers.csv --cache .pmdCache --no-progress --no-fail-on-violation --no-fail-on-error --property package=false --property ruleSet=false --property problem=false --property rule=false --minimum-priority 2
          # --relativize-paths-with ${{vars.SFDX_ROOT_DIRECTORY}}

      - name: Read CSV - Blockers'
        id: csv
        uses: juliangruber/read-file-action@v1
        with:
          path: ./pmd-blockers.csv

      - name: Create MD - Blockers'
        uses: petems/csv-to-md-table-action@master
        id: csv-table-output-blockers
        with:
          csvinput: ${{ steps.csv.outputs.content }}

      - name: Summary Table - Blockers
        id: md_to_output-all
        run: |
          echo "# BLOCKERS" >> $GITHUB_STEP_SUMMARY  
          echo "${{steps.csv-table-output-blockers.outputs.markdown-table}}" >> $GITHUB_STEP_SUMMARY

      - name: 'Run PMD scan to CSV - All violations'
        id: pmd_csv_all
        if: always()
        run: |
          ~/pmd/bin/pmd check --file-list changed.txt --rulesets config/pmd/ruleset.xml --format csv --report-file pmd-all.csv --cache .pmdCache --no-progress --no-fail-on-violation --no-fail-on-error --property package=false --property ruleSet=false --property problem=false --property rule=false

      - name: Upload all violations file in CSV format
        if: always()
        uses: actions/upload-artifact@v4
        with:
          path: pmd-all.csv
          name: PMDViolations
          compression-level: 0

      - name: 'Run PMD scan to HTML'
        id: pmd_html
        if: always()
        run: |
          ~/pmd/bin/pmd check --file-list changed.txt --rulesets config/pmd/ruleset.xml --format html --cache .pmdCache --report-file pmd.html --show-suppressed --no-fail-on-violation --no-fail-on-error --minimum-priority 5 --property linePrefix=L --property linkPrefix=https://github.com/${{github.repository}}/blob/${{github.head_ref}}/
          sed -i 's|<title>PMD</title>||g' pmd.html
          sed -i 's|<table |<table width="100%" |g' pmd.html
          cat pmd.html | grep -B 1000000000 "<h3>Processing errors</h3>" > pmd-errors.html
          sed -i 's|<center><h3>Processing errors</h3></center><table width="100%" align="center" cellspacing="0" cellpadding="3"><tr>||g' pmd-errors.html

      - name: Step Table
        id: html_to_output
        run: |
          echo "$(cat pmd-errors.html)" >> $GITHUB_STEP_SUMMARY

      - name: Evaluate Errrors
        id: evaluate_errors
        run: |
          ERROR_COUNT=$(wc -l pmd-blockers.csv|awk '{print $1}')
          echo $ERROR_COUNT
          ERROR_COUNT=$((ERROR_COUNT - 1))
          # echo $ERROR_COUNT >> "$GITHUB_OUTPUT"
          echo "ERRORS FOUND:" $ERROR_COUNT  # Print to console
          if [[ $ERROR_COUNT > 0 ]]; then
            ERROR_STRING="$ERROR_COUNT Blocking Violations Detected"
            echo "::error::$ERROR_STRING"
            exit 1
          fi
