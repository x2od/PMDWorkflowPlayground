# This is a main workflow to trigger on pull requests for DX repositories

name: Pull Request Scan (DX)

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - '**'
    types: [opened, synchronize, reopened]

env:
  blocking_severity: 2
  csv_properties: --property package=false --property problem=false --property ruleSet=false

jobs:
  scan-pmd:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest

    steps:
      # Check out the source code
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: 'Set Filename'
        id: set_filename
        run: echo "filename=${{ github.event.repository.name }}_$(date --utc +%Y%m%d_%H%M%SZ)" >> $GITHUB_OUTPUT

      # Install PMD
      - name: Install PMD
        id: pmd
        run: |
          PMD_VERSION=$(curl -s https://api.github.com/repos/pmd/pmd/releases/latest | grep '.tag_name' | sed 's:.*/::' | sed 's:",::')
          echo $PMD_VERSION
          if [ ! -f "./pmd-dist-$PMD_VERSION-bin.zip" ]; then 
            wget -q https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-dist-$PMD_VERSION-bin.zip
            unzip -q pmd-dist-$PMD_VERSION-bin.zip -d ~
            mv ~/pmd-bin-$PMD_VERSION ~/pmd
            ~/pmd/bin/pmd --version
          fi

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          output_renamed_files_as_deleted_and_added: true
          separator: ','
          old_new_separator: '\n'
          old_new_files_separator: '\n'

      - name: Add changed files to changed.txt
        shell: bash
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          IFS=$',' read -a ALL_CHANGED_FILES <<< "${{ steps.changed-files.outputs.all_changed_files }}"
           for file in "${ALL_CHANGED_FILES[@]}"; do
             echo $file >> changed.txt
           done
          cat changed.txt

      ####################### ALL VIOLATIONS CHECK

      - name: Run PMD scan to CSV - All violations
        id: pmd_csv_all
        run: |
          rm -f .pmdCache
          ~/pmd/bin/pmd check --file-list changed.txt --rulesets config/dtc_pmd_ruleset.xml --format csv --report-file ${{ steps.set_filename.outputs.filename }}.csv --cache .pmdCache --no-progress --no-fail-on-violation --no-fail-on-error $csv_properties

      - name: Priority to Severity
        id: priority_to_severity_all
        run: sed -i 's|"Priority"|"Severity"|g' ${{ steps.set_filename.outputs.filename }}.csv

      ######## EVALUATE ALL VIOLATIONS

      - name: Evaluate all violations
        id: evaluate_violations_all
        run: |
          csv_line_count=$(wc -l ${{ steps.set_filename.outputs.filename }}.csv|awk '{print $1}')
          #echo $csv_line_count
          violation_count=$((csv_line_count - 1))
          echo "violation_count=$violation_count" >> $GITHUB_OUTPUT
          echo "VIOLATIONS FOUND:" $violation_count  # Print to console
           if [[ $violation_count > 0 ]]; then
             VIOLATION_STRING="$violation_count Scanning Violations Detected (all severities) in changed files - download CSV to check"
             echo "::error::$VIOLATION_STRING"
           elif [[ $violation_count == 0 ]]; then
             echo "::notice::No Scanning Violations Detected"
             exit 0
           fi

      - name: Upload all violations file in CSV format
        if: ${{ steps.evaluate_violations_all.outputs.violation_count > 0 }}
        uses: actions/upload-artifact@v4
        with:
          path: ${{ steps.set_filename.outputs.filename }}.csv
          name: ${{ steps.set_filename.outputs.filename }}_PMD
          compression-level: 0

      ##################### BLOCKERS CHECK
      - name: Show only Blockers from CSV
        run: |
          echo "blocking_severity " $blocking_severity
          block_sev=$(($blocking_severity))
          echo "block_sev " $block_sev
          head -n 1 ${{ steps.set_filename.outputs.filename }}.csv > pmd-blockers.csv
          awk -v var="$blocking_severity" -F '","'  'BEGIN {OFS=","} { if (($2 <= var))  print }' ${{ steps.set_filename.outputs.filename }}.csv >> pmd-blockers.csv
          cat pmd-blockers.csv

      - name: Read CSV - Blockers
        id: csv_blockers
        uses: juliangruber/read-file-action@v1
        with:
          path: ./pmd-blockers.csv

      - name: Create MD - Blockers
        uses: petems/csv-to-md-table-action@master
        id: csv-table-blockers
        with:
          csvinput: ${{ steps.csv_blockers.outputs.content }}

      # Check blocker count from CSV
      # If has blockers, exit 1
      - name: Evaluate Blocker Violations
        id: evaluate_violations_blockers
        run: |
          csv_blocker_count=$(wc -l pmd-blockers.csv|awk '{print $1}')
          blocker_count=$((csv_blocker_count - 1))
          echo "blocker_count=$blocker_count" >> $GITHUB_OUTPUT
          echo "BLOCKERS FOUND:" $blocker_count  # Print to console
          if [[ $blocker_count > 0 ]]; then
            echo "## Blockers in Changed Files" >> $GITHUB_STEP_SUMMARY
            echo "${{steps.csv-table-blockers.outputs.markdown-table}}" >> $GITHUB_STEP_SUMMARY
            BLOCKER_STRING="$blocker_count Blocking Violations Detected"
            echo "::error::$BLOCKER_STRING"
          elif [[ $blocker_count == 0 ]]; then
            echo "::notice::No Blocking Violations Detected"
          fi

      ############# OTHER VIOLATIONS CHECK

      - name: Show non-Blockers from CSV
        run: |
          echo "blocking_severity " $blocking_severity
          block_sev=$(($blocking_severity))
          echo "block_sev " $block_sev
          #head -n 1 ${{ steps.set_filename.outputs.filename }}.csv > pmd-other.csv
          awk -v var="$blocking_severity" -F '","'  'BEGIN {OFS=","} { if (($2 > var))  print }' ${{ steps.set_filename.outputs.filename }}.csv >> pmd-other.csv
          cat pmd-other.csv

      - name: Priority to Severity
        id: priority_to_severity_other
        run: sed -i 's|"Priority"|"Severity"|g' pmd-other.csv

      - name: Read CSV - other
        id: csv_other
        uses: juliangruber/read-file-action@v1
        with:
          path: ./pmd-other.csv

      - name: Create MD - other
        uses: petems/csv-to-md-table-action@master
        id: csv-table-other
        with:
          csvinput: ${{ steps.csv_other.outputs.content }}

      - name: Evaluate Other Violations
        id: evaluate_violations_other
        run: |
          csv_other_count=$(wc -l pmd-other.csv|awk '{print $1}')
          other_count=$((csv_other_count - 1))
          echo "other_count=$other_count" >> $GITHUB_OUTPUT
          echo "NON-BLOCKER FOUND:" $other_count  # Print to console
          if [[ $other_count > 0 ]]; then
            echo "## Non-Blocking Violations in Changed Files" >> $GITHUB_STEP_SUMMARY
            echo "${{steps.csv-table-other.outputs.markdown-table}}" >> $GITHUB_STEP_SUMMARY
          fi

      # Run PMD SARIF can
      - name: Run PMD scan to SARIF
        id: pmd_sarif
        run: |
          #rm -f .pmdCache
          ~/pmd/bin/pmd check --file-list changed.txt --rulesets config/dtc_pmd_ruleset.xml --format sarif --report-file pmd-cli-report.sarif --cache .pmdCache --no-progress --no-fail-on-violation --no-fail-on-error --minimum-priority 2

      - name: Upload violations file in SARIF format
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-cli-report.sarif
          category: PMD

      - name: Comment Violations
        id: comment_violations
        run: |
          while IFS="," read -r col1 col2 col3 col4 col5
          do
            echo "File $col1"
            echo "Sev: $col2"
            echo "Line: $col3"
            echo "Description: $col4"
            echo ""
          done < <(tail -n +2 pmd-blockers.csv)

      - name: Check Blocker Count for Exit Code
        if: ${{ steps.evaluate_violations_blockers.outputs.blocker_count > 0 }}
        run: exit 1
