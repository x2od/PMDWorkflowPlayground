# This is a main workflow to trigger on pull requests for DX repositories

name: On PR (DX)

# Controls when the workflow will run
on:
  pull_request:
    branches:
      - '**'
    types: [opened, synchronize, reopened]

jobs:
  scan-pmd:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    runs-on: ubuntu-latest
    outputs:
      #blocker_count: ${{ steps.evaluate_violations_blockers.outputs.blocker_count }}
      violation_count: ${{ steps.evaluate_violations_all.outputs.violation_count }}

    steps:
      # Check out the source code
      - name: Checkout source code
        uses: actions/checkout@v4

      # Install PMD
      - name: Install PMD
        id: pmd
        run: |
          PMD_VERSION=$(curl -s https://api.github.com/repos/pmd/pmd/releases/latest | grep '.tag_name' | sed 's:.*/::' | sed 's:",::')
          echo $PMD_VERSION
          if [ ! -f "./pmd-dist-$PMD_VERSION-bin.zip" ]; then 
            wget -q https://github.com/pmd/pmd/releases/download/pmd_releases%2F$PMD_VERSION/pmd-dist-$PMD_VERSION-bin.zip
            unzip -q pmd-dist-$PMD_VERSION-bin.zip -d ~
            mv ~/pmd-bin-$PMD_VERSION ~/pmd
            ~/pmd/bin/pmd --version
          fi
          rm -f .pmdCache

      # - name: Collect changed files
      #   env:
      #     GH_TOKEN: ${{ github.token }}
      #     BRANCH: ${{ github.head_ref }}
      #   run: |
      #     echo "Changed files for this PR:"
      #     gh pr diff "$BRANCH" --name-only > list.txt
      #     cat list.txt

      - name: Action to get changed files
        id: changed-files
        uses: tj-actions/changed-files@v45
        with:
          output_renamed_files_as_deleted_and_added: true
          separator: ','
          old_new_separator: '\n'
          old_new_files_separator: '\n'

      - name: Add changed files to changed.txt
        shell: bash
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
        run: |
          IFS=$',' read -a ALL_CHANGED_FILES <<< "${{ steps.changed-files.outputs.all_changed_files }}"
           for file in "${ALL_CHANGED_FILES[@]}"; do
             echo $file >> changed.txt
           done
          cat changed.txt

      # Run PMD scan
      - name: Run PMD scan to SARIF
        id: pmd_sarif
        run: ~/pmd/bin/pmd check --file-list changed.txt --rulesets config/pmd/ruleset.xml --format sarif --report-file pmd-cli-report.sarif --cache .pmdCache --no-progress --no-fail-on-violation --no-fail-on-error --minimum-priority 2

      - name: Upload violations file in SARIF format
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: pmd-cli-report.sarif
          category: PMD

      ############################# BLOCKERS CHECK

      - name: Run PMD scan to CSV - Blockers
        id: pmd_csv_blockers
        run: |
          ~/pmd/bin/pmd check --file-list changed.txt --rulesets config/pmd/ruleset.xml --format csv --report-file pmd-blockers.csv --cache .pmdCache --no-progress --no-fail-on-violation --no-fail-on-error --property package=false --property ruleSet=false --property problem=false --property rule=false --minimum-priority 2
          # --relativize-paths-with ${{vars.SFDX_ROOT_DIRECTORY}}

      - name: Read CSV - Blockers
        id: csv_blockers
        uses: juliangruber/read-file-action@v1
        with:
          path: ./pmd-blockers.csv

      - name: Create MD - Blockers'
        uses: petems/csv-to-md-table-action@master
        id: csv-table-output-blockers
        with:
          csvinput: ${{ steps.csv_blockers.outputs.content }}

      # Check blocker count from CSV
      # If has blockers, exit 1
      # If no blockers, still upload the file with all violations
      - name: Evaluate Blocker Violations
        id: evaluate_violations_blockers
        run: |
          blocker_count=$(wc -l pmd-blockers.csv|awk '{print $1}')
          echo $blocker_count
          blocker_count=$((blocker_count - 1))
          #echo "$blocker_count" >> "$GITHUB_OUTPUT"
          echo "BLOCKERS FOUND:" $blocker_count  # Print to console
          if [[ $blocker_count > 0 ]]; then
            echo "## Blockers" >> $GITHUB_STEP_SUMMARY  
            echo "${{steps.csv-table-output-blockers.outputs.markdown-table}}" >> $GITHUB_STEP_SUMMARY
          elif [[ $blocker_count == 0 ]]; then
            echo "::notice::No Blocking Violations Detected"
          fi

      ####################### ALL VIOLATIONS CHECK

      - name: Run PMD scan to CSV - All violations
        id: pmd_csv_all
        run: |
          ~/pmd/bin/pmd check --file-list changed.txt --rulesets config/pmd/ruleset.xml --format csv --report-file pmd-all.csv --cache .pmdCache --no-progress --no-fail-on-violation --no-fail-on-error --property package=false --property ruleSet=false --property problem=false --property rule=false

      - name: Evaluate All Violations
        id: evaluate_violations_all
        run: |
          violation_count=$(wc -l pmd-all.csv|awk '{print $1}')
          # echo $violation_count
          violation_count=$((violation_count - 1))
          echo $violation_count >> "$GITHUB_OUTPUT"
          echo "VIOLATIONS FOUND:" $violation_count  # Print to console
          if [[ $violation_count > 0 ]]; then
            VIOLATION_STRING="$violation_count Blocking Violations Detected"
            echo "::error::$VIOLATION_STRING"
            exit 1
          elif [[ $violation_count == 0 ]]; then
            echo "::notice::No Scanning Violations Detected"
          fi

      - name: Upload all violations file in CSV format
        if: ${{ steps.evaluate_violations_all.outputs.violation_count > 0 }}
        uses: actions/upload-artifact@v4
        with:
          path: pmd-all.csv
          name: PMDViolations
          compression-level: 0

      # - name: Check exit code
      #   if: ${{ steps.evaluate_violations_blockers.outputs.blocker_count > 0 }}
      #   run: exit 1
