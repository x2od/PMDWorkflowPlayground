name: ARCS SARIF

# run-name: Repository PMD scan by @${{ github.actor }}

on:
  workflow_dispatch:
    
env:
  AUTORABIT_CODESCAN_TOKEN:               ${{ secrets.AUTORABIT_CLOUD_TOKEN }}
  AUTORABIT_CODESCAN_ORGANIZATION:        ${{ vars.AUTORABIT_CODESCAN_ORG }}
  AUTORABIT_CODESCAN_PROJECT_KEY:         ${{ vars.AUTORABIT_CODESCAN_PROJECT_KEY }}
  AUTORABIT_CODESCAN_URI:                 ${{ vars.AUTORABIT_CODESCAN_URI }}
  AUTORABIT_CODESCAN_EXPORT_FILENAME:     "autorabit_codescan_export.csv"
  STOP_BUILD_ON_QUALITY_GATE:             "true"

jobs:
  codescan-sarif:
    permissions:
      contents: read # for actions/checkout to fetch code
    runs-on: ubuntu-latest
    
    outputs:
      filename: ${{ steps.set_filename.outputs.filename }}
      SCAN_STATUS: ${{ steps.scan_run.outputs.scan_result_status }}

    steps:
      - uses: actions/checkout@v4

      - name: install sfdx
        shell: pwsh
        run: |
          $version_number='2.58.7'
          Write-Output "Installing SFDX CLI"
          npm install -g npm
          node --version

          Write-Output "npm install --global @salesforce/cli@$version_number "
          npm install --global @salesforce/cli@$version_number

      - name: SETUP JAVA
        uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: '21'
      
      - name: install CS plugin
        run: |
          echo "Installing AutoRabit Codescanner SFDX Plugin"
          echo y | sfdx plugins:install sfdx-codescan-plugin
      
      - name: cs export util
        run: |
          echo "Installing AutoRabit Codescanner Export Utility"

          npm i codescan-export -g
          codescan-export -v

      - name: Set Filename
        id: set_filename
        run: echo "filename=${{ github.event.repository.name }}_$(date --utc +%Y%m%d_%H%M%SZ)" >> "$GITHUB_OUTPUT"

      # Run scan
      - name: 'Run scan'
        id: run_scan
        shell: pwsh
        run: |
          $autorabit_result_file_name = "autorabit_export_result_file.txt"
          $autorabit_result_json_file_name = "autorabit_result_json.txt"
          # sfdx codescan:run --token ${CODESCAN_TOKEN} --projectkey ${MY_PROJECT_KEY} --organization ${MY_PROJECT_KEY} -Dsonar.analysis.report.type=sarif -Dsonar.analysis.report.enabled=true
          $result_file = $(sfdx codescan:run --token ${{secrets.AUTORABIT_CLOUD_TOKEN}} --projectkey ${{vars.AUTORABIT_CODESCAN_PROJECT_KEY}} --organization veteransaffairs -s ${{ vars.AUTORABIT_CODESCAN_URI }} --nofail -D sonar.analysis.report.type=sarif -D sonar.analysis.report.enabled=true *> $autorabit_result_file_name) | Out-Null
          write-host "scan result: $result_file"
          
      - name: autorabit sfdx codescan
        id: scan_run
        env:
          AUTORABIT_CODESCAN_TOKEN: ${{ secrets.AUTORABIT_CLOUD_TOKEN }}
          AUTORABIT_CODESCAN_ORGANIZATION: ${{ vars.AUTORABIT_CODESCAN_ORG }}
          AUTORABIT_CODESCAN_PROJECT_KEY: ${{ vars.AUTORABIT_CODESCAN_PROJECT_KEY }}
          AUTORABIT_CODESCAN_URI: ${{ vars.AUTORABIT_CODESCAN_URI }}
        shell: pwsh
        run: |
          $stop_build_on_quality_gate_fail = $true
          
          #save scan to a file
          $autorabit_result_file_name = "autorabit_export_result_file.txt"
          $autorabit_result_json_file_name = "autorabit_result_json.txt"
          # $autorabit_result_file = $(sfdx codescan:run --token $env:AUTORABIT_CODESCAN_TOKEN --projectkey $env:AUTORABIT_CODESCAN_PROJECT_KEY --organization $env:AUTORABIT_CODESCAN_ORGANIZATION -s $env:AUTORABIT_CODESCAN_URI --nofail --json *> $autorabit_result_file_name) | Out-Null
          $autorabit_codescan_results = $(Get-Content $autorabit_result_file_name)
          
          #regex match the content: {} around any whitespace or non-swhitespace characters...aka json
          $json_regex = "\{([\s\S]*)\}"
          $codescan_json_regex_match_results = [regex]::match($autorabit_codescan_results, $json_regex)
          
          $codescan_json = $null
          if ($codescan_json_regex_match_results.success) {
            $codescan_json = $codescan_json_regex_match_results.Groups[0].Value
          }
          $codescan_json *> $autorabit_result_json_file_name
          
          $codescan_result = $null
          if (![string]::IsNullOrEmpty(($codescan_json))) {
          $codescan_result = $codescan_json | ConvertFrom-Json
          }
          
          # establish if the scan was a success or failure
          $stop_build_on_quality_gate_fail = [System.Convert]::ToBoolean($stop_build_on_quality_gate_fail)
          $autorabit_codescan_status_result = 1
          if ($stop_build_on_quality_gate_fail) {
          $failure_code = 1
          $success_code = 0
          $autorabit_codescan_status_result = ( ($codescan_result.result.code -eq 0) -and ($codescan_result.status -eq 0) ) ? $success_code : $failure_code
          } else {
            $autorabit_codescan_status_result = $codescan_result.status
          }
          
          # output the status for later
          "scan_result_status=$autorabit_codescan_status_result" >> $env:GITHUB_OUTPUT
          
          # #save result to multi-line gh env var for use in a later step
          # echo "autorabit_codescan_results<<EOF" >> $GITHUB_ENV
          # echo "$autorabit_codescan_results" >> $GITHUB_ENV
          # echo "EOF" >> $GITHUB_ENV

      - name: Upload quality gate info
        uses: actions/upload-artifact@v4
        with:
          path: autorabit_result_json.txt
          name: scan_result_json
          compression-level: 0

      - name: Upload full scan info
        uses: actions/upload-artifact@v4
        with:
          path: autorabit_export_result_file.txt
          name: scan_result_output
          compression-level: 0

      - name: Upload sarif
        uses: actions/upload-artifact@v4
        with:
          path: codescan.sarif
          name: scan_sarif
          compression-level: 0


      - name: parse
        id: parse
        shell: pwsh
        run: | 
          $autorabit_result_file_name = "autorabit_export_result_file.txt"
          $autorabit_result_json_file_name = "autorabit_result_json.txt"
          $autorabit_codescan_results_content = Get-Content $autorabit_result_json_file_name
          write-host "CODESCAN_RESULTS_CONTENT FOLLOWS:"
          write-host $autorabit_codescan_results_content

          # $autorabit_results_csv = $autorabit_codescan_results_content | ConvertFrom-Csv
          $autorabit_results_csv = $autorabit_codescan_results_content | ConvertFrom-Json

          Write-Host "autorabit csv results : $autorabit_results_csv"
          $critical_issues = $autorabit_results_csv | Where-Object { $_.Severity -eq "CRITICAL" }

          if ( $critical_issues.count -gt 0 ) {
              Write-Host "CRITICAL ISSUES FOUND: $critical_issues"
              Throw "CRITICAL ISSUES DISCOVERED: $critical_issues"
          }


